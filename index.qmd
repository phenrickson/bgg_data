---
title: "BGG Data"
---

# Overview

Loading historical data from BoardGameGeek (BGG) for predictive modeling and analysis.

1. Loads universe of game ids from [bgg activity club](http://bgg.activityclub.org/bggdata/thingids.txt])
2. Submits batches of requests via [bggUtils](https://github.com/phenrickson/bggUtils)
3. Stores responses on BigQuery and Google Cloud Storage

## Targets

Uses [targets](https://github.com/ropensci/targets) package to create pipeline

```{r}
#| include: false
library(targets)
library(dplyr)
library(tibble)
library(qs)
library(qs2)
library(purrr)
library(googleCloudStorageR)

# set scopes for authentication
googleCloudStorageR:::set_scopes()
# authenticate via encrypted json
googleCloudStorageR::gcs_auth(
    json_file = gargle::secret_decrypt_json(
        path = ".secrets/gcp-demos",
        key = "GCS_AUTH_KEY"
    )
)

# src code
targets::tar_source("src")

# load most recent bggs
tar_load(games_batch)

# set bucket
googleCloudStorageR::gcs_global_bucket(bucket = "bgg_data")
```

## Pipeline

```{r}
#| fig-align: center
#| fig-height: 4
#| message: false
#| warning: false
targets::tar_visnetwork(targets_only = T)
```


## Data

batches of games requested from API

```{r}
#| message: false
#| label: view batches of games saved in buckets
list_games_objects = function(bucket, prefix = "raw/objects/games") {
    googleCloudStorageR::gcs_list_objects(
        bucket = bucket,
        prefix = prefix,
        versions = T,
        detail = "full"
    ) |>
        filter(name == prefix) |>
        arrange(desc(updated))
}

print_games_objects = function(obj) {
    obj |>
        select(bucket, name, generation, updated) |>
        knitr::kable(format = "markdown")
}

buckets = c("bgg_data", "bgg_data_dev", "bgg_data_staging")
games_objs <- map(
    buckets,
    ~ list_games_objects(bucket = .x)
)
names(games_objs) = buckets
```

::: {.panel-tabset}

### Production

```{r}
#| code-fold: false
games_objs$bgg_data |>
    print_games_objects()

```

### Staging

```{r}
#| code-fold: false
games_objs$bgg_data_staging |>
    print_games_objects()

```

:::

## Games

What's new on BGG?

```{r message = F}
# get last two generations
gens <-
    games_objs$bgg_data |>
    arrange(desc(updated)) |>
    head(2) |>
    pull(generation)

# most recent gen
active_games <- load_games_from_bucket(
    bucket = "bgg_data",
    generation = gens[1]
)
previous_games <- load_games_from_bucket(
    bucket = "bgg_data",
    generation = gens[2]
)

# find games only in most recent batch
active_games |>
    anti_join(
        previous_games |>
            select(game_id)
    ) |>
    bggUtils:::unnest_info() |>
    select(game_id, name, yearpublished) |>
    arrange(desc(yearpublished)) |>
    knitr::kable(format = "markdown")
```
