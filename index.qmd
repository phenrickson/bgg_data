---
title: "BGG Data"
---

# Overview

Loading historical data from BoardGameGeek (BGG) for predictive modeling and analysis.

1. Loads universe of game ids from [bgg activity club](http://bgg.activityclub.org/bggdata/thingids.txt])
2. Submits batches of requests via [bggUtils](https://github.com/phenrickson/bggUtils)
3. Stores responses on BigQuery and Google Cloud Storage

## Targets

Uses [targets](https://github.com/ropensci/targets) package to create pipeline

```{r}
#| include: false
library(targets)
library(dplyr)
library(tibble)
library(qs)
library(googleCloudStorageR)

# set scopes for authentication
googleCloudStorageR:::set_scopes()
# authenticate via encrypted json
googleCloudStorageR::gcs_auth(
  json_file = gargle::secret_decrypt_json(
    path = ".secrets/gcp-demos",
    key = "GCS_AUTH_KEY"
  )
)

# load most recent bggs
tar_load(games_batch)

# set bucket
googleCloudStorageR::gcs_global_bucket(bucket = "bgg_data")
```

## pipeline

```{r}
#| fig-align: center
#| fig-height: 4
#| message: false
#| warning: false
targets::tar_visnetwork(targets_only = T)
```


## data

batches of games requested from API

```{r message = F}
games_objs <-
  googleCloudStorageR::gcs_list_objects(
    prefix = "raw/objects/games",
    versions = T,
    detail = "full"
  ) |>
  filter(name == "raw/objects/games") |>
  select(bucket, name, generation, size, updated)

games_objs |>
  arrange(desc(updated)) |>
  knitr::kable(format = "markdown")
```

```{r message = F}
# get last two generations
gens <-
  games_objs |>
  arrange(desc(updated)) |>
  head(2) |>
  pull(generation)

# most recent gen
active_games <- gcs_get_object("raw/objects/games", generation = gens[1]) |>
  qs::qdeserialize()
previous_games <- gcs_get_object("raw/objects/games", generation = gens[2]) |>
  qs::qdeserialize()

# find games only in most recent batch
active_games |>
  anti_join(
    previous_games |>
      select(game_id)
  ) |>
  bggUtils:::unnest_info() |>
  select(game_id, name, yearpublished) |>
  arrange(desc(yearpublished)) |>
  knitr::kable(format = "markdown")
```
